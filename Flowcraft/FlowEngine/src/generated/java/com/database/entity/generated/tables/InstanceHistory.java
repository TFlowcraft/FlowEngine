/*
 * This file is generated by jOOQ.
 */
package com.database.entity.generated.tables;


import com.database.entity.generated.Indexes;
import com.database.entity.generated.Keys;
import com.database.entity.generated.Public;
import com.database.entity.generated.tables.InstanceTasks.InstanceTasksPath;
import com.database.entity.generated.tables.ProcessInstance.ProcessInstancePath;
import com.database.entity.generated.tables.records.InstanceHistoryRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InstanceHistory extends TableImpl<InstanceHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.instance_history</code>
     */
    public static final InstanceHistory INSTANCE_HISTORY = new InstanceHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstanceHistoryRecord> getRecordType() {
        return InstanceHistoryRecord.class;
    }

    /**
     * The column <code>public.instance_history.id</code>.
     */
    public final TableField<InstanceHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.instance_history.instance_id</code>.
     */
    public final TableField<InstanceHistoryRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.instance_history.task_id</code>.
     */
    public final TableField<InstanceHistoryRecord, UUID> TASK_ID = createField(DSL.name("task_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.instance_history.task_status</code>.
     */
    public final TableField<InstanceHistoryRecord, String> TASK_STATUS = createField(DSL.name("task_status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.instance_history.error_stacktrace</code>.
     */
    public final TableField<InstanceHistoryRecord, JSONB> ERROR_STACKTRACE = createField(DSL.name("error_stacktrace"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.instance_history.timestamp</code>.
     */
    public final TableField<InstanceHistoryRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private InstanceHistory(Name alias, Table<InstanceHistoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InstanceHistory(Name alias, Table<InstanceHistoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.instance_history</code> table reference
     */
    public InstanceHistory(String alias) {
        this(DSL.name(alias), INSTANCE_HISTORY);
    }

    /**
     * Create an aliased <code>public.instance_history</code> table reference
     */
    public InstanceHistory(Name alias) {
        this(alias, INSTANCE_HISTORY);
    }

    /**
     * Create a <code>public.instance_history</code> table reference
     */
    public InstanceHistory() {
        this(DSL.name("instance_history"), null);
    }

    public <O extends Record> InstanceHistory(Table<O> path, ForeignKey<O, InstanceHistoryRecord> childPath, InverseForeignKey<O, InstanceHistoryRecord> parentPath) {
        super(path, childPath, parentPath, INSTANCE_HISTORY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InstanceHistoryPath extends InstanceHistory implements Path<InstanceHistoryRecord> {
        public <O extends Record> InstanceHistoryPath(Table<O> path, ForeignKey<O, InstanceHistoryRecord> childPath, InverseForeignKey<O, InstanceHistoryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InstanceHistoryPath(Name alias, Table<InstanceHistoryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InstanceHistoryPath as(String alias) {
            return new InstanceHistoryPath(DSL.name(alias), this);
        }

        @Override
        public InstanceHistoryPath as(Name alias) {
            return new InstanceHistoryPath(alias, this);
        }

        @Override
        public InstanceHistoryPath as(Table<?> alias) {
            return new InstanceHistoryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_INSTANCE_HISTORY_INSTANCE_ID, Indexes.IDX_INSTANCE_HISTORY_TASK_ID);
    }

    @Override
    public UniqueKey<InstanceHistoryRecord> getPrimaryKey() {
        return Keys.INSTANCE_HISTORY_PKEY;
    }

    @Override
    public List<ForeignKey<InstanceHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INSTANCE_HISTORY__INSTANCE_HISTORY_INSTANCE_ID_FKEY, Keys.INSTANCE_HISTORY__INSTANCE_HISTORY_TASK_ID_FKEY);
    }

    private transient ProcessInstancePath _processInstance;

    /**
     * Get the implicit join path to the <code>public.process_instance</code>
     * table.
     */
    public ProcessInstancePath processInstance() {
        if (_processInstance == null)
            _processInstance = new ProcessInstancePath(this, Keys.INSTANCE_HISTORY__INSTANCE_HISTORY_INSTANCE_ID_FKEY, null);

        return _processInstance;
    }

    private transient InstanceTasksPath _instanceTasks;

    /**
     * Get the implicit join path to the <code>public.instance_tasks</code>
     * table.
     */
    public InstanceTasksPath instanceTasks() {
        if (_instanceTasks == null)
            _instanceTasks = new InstanceTasksPath(this, Keys.INSTANCE_HISTORY__INSTANCE_HISTORY_TASK_ID_FKEY, null);

        return _instanceTasks;
    }

    @Override
    public List<Check<InstanceHistoryRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("instance_history_task_status_check"), "(((task_status)::text = ANY ((ARRAY['PENDING'::character varying, 'RUNNING'::character varying, 'COMPLETED'::character varying, 'FAILED'::character varying])::text[])))", true)
        );
    }

    @Override
    public InstanceHistory as(String alias) {
        return new InstanceHistory(DSL.name(alias), this);
    }

    @Override
    public InstanceHistory as(Name alias) {
        return new InstanceHistory(alias, this);
    }

    @Override
    public InstanceHistory as(Table<?> alias) {
        return new InstanceHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceHistory rename(String name) {
        return new InstanceHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceHistory rename(Name name) {
        return new InstanceHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceHistory rename(Table<?> name) {
        return new InstanceHistory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceHistory where(Condition condition) {
        return new InstanceHistory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceHistory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceHistory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceHistory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceHistory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceHistory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceHistory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceHistory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceHistory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceHistory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
