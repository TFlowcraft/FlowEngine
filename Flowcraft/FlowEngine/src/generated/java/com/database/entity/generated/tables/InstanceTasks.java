/*
 * This file is generated by jOOQ.
 */
package com.database.entity.generated.tables;


import com.database.entity.generated.Indexes;
import com.database.entity.generated.Keys;
import com.database.entity.generated.Public;
import com.database.entity.generated.tables.InstanceHistory.InstanceHistoryPath;
import com.database.entity.generated.tables.ProcessInstance.ProcessInstancePath;
import com.database.entity.generated.tables.records.InstanceTasksRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InstanceTasks extends TableImpl<InstanceTasksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.instance_tasks</code>
     */
    public static final InstanceTasks INSTANCE_TASKS = new InstanceTasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstanceTasksRecord> getRecordType() {
        return InstanceTasksRecord.class;
    }

    /**
     * The column <code>public.instance_tasks.id</code>.
     */
    public final TableField<InstanceTasksRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.instance_tasks.instance_id</code>.
     */
    public final TableField<InstanceTasksRecord, UUID> INSTANCE_ID = createField(DSL.name("instance_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.instance_tasks.bpmn_element_id</code>.
     */
    public final TableField<InstanceTasksRecord, UUID> BPMN_ELEMENT_ID = createField(DSL.name("bpmn_element_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.instance_tasks.status</code>.
     */
    public final TableField<InstanceTasksRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.instance_tasks.start_time</code>.
     */
    public final TableField<InstanceTasksRecord, OffsetDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.instance_tasks.end_time</code>.
     */
    public final TableField<InstanceTasksRecord, OffsetDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.instance_tasks.current_retries_amount</code>.
     */
    public final TableField<InstanceTasksRecord, Integer> CURRENT_RETRIES_AMOUNT = createField(DSL.name("current_retries_amount"), SQLDataType.INTEGER, this, "");

    private InstanceTasks(Name alias, Table<InstanceTasksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InstanceTasks(Name alias, Table<InstanceTasksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.instance_tasks</code> table reference
     */
    public InstanceTasks(String alias) {
        this(DSL.name(alias), INSTANCE_TASKS);
    }

    /**
     * Create an aliased <code>public.instance_tasks</code> table reference
     */
    public InstanceTasks(Name alias) {
        this(alias, INSTANCE_TASKS);
    }

    /**
     * Create a <code>public.instance_tasks</code> table reference
     */
    public InstanceTasks() {
        this(DSL.name("instance_tasks"), null);
    }

    public <O extends Record> InstanceTasks(Table<O> path, ForeignKey<O, InstanceTasksRecord> childPath, InverseForeignKey<O, InstanceTasksRecord> parentPath) {
        super(path, childPath, parentPath, INSTANCE_TASKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InstanceTasksPath extends InstanceTasks implements Path<InstanceTasksRecord> {
        public <O extends Record> InstanceTasksPath(Table<O> path, ForeignKey<O, InstanceTasksRecord> childPath, InverseForeignKey<O, InstanceTasksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InstanceTasksPath(Name alias, Table<InstanceTasksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InstanceTasksPath as(String alias) {
            return new InstanceTasksPath(DSL.name(alias), this);
        }

        @Override
        public InstanceTasksPath as(Name alias) {
            return new InstanceTasksPath(alias, this);
        }

        @Override
        public InstanceTasksPath as(Table<?> alias) {
            return new InstanceTasksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_INSTANCE_TASKS_BPMN_ELEMENT_ID, Indexes.IDX_INSTANCE_TASKS_INSTANCE_ID);
    }

    @Override
    public UniqueKey<InstanceTasksRecord> getPrimaryKey() {
        return Keys.INSTANCE_TASKS_PKEY;
    }

    @Override
    public List<ForeignKey<InstanceTasksRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INSTANCE_TASKS__INSTANCE_TASKS_INSTANCE_ID_FKEY);
    }

    private transient ProcessInstancePath _processInstance;

    /**
     * Get the implicit join path to the <code>public.process_instance</code>
     * table.
     */
    public ProcessInstancePath processInstance() {
        if (_processInstance == null)
            _processInstance = new ProcessInstancePath(this, Keys.INSTANCE_TASKS__INSTANCE_TASKS_INSTANCE_ID_FKEY, null);

        return _processInstance;
    }

    private transient InstanceHistoryPath _instanceHistory;

    /**
     * Get the implicit to-many join path to the
     * <code>public.instance_history</code> table
     */
    public InstanceHistoryPath instanceHistory() {
        if (_instanceHistory == null)
            _instanceHistory = new InstanceHistoryPath(this, null, Keys.INSTANCE_HISTORY__INSTANCE_HISTORY_TASK_ID_FKEY.getInverseKey());

        return _instanceHistory;
    }

    @Override
    public List<Check<InstanceTasksRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("instance_tasks_status_check"), "(((status)::text = ANY ((ARRAY['PENDING'::character varying, 'RUNNING'::character varying, 'COMPLETED'::character varying, 'FAILED'::character varying])::text[])))", true)
        );
    }

    @Override
    public InstanceTasks as(String alias) {
        return new InstanceTasks(DSL.name(alias), this);
    }

    @Override
    public InstanceTasks as(Name alias) {
        return new InstanceTasks(alias, this);
    }

    @Override
    public InstanceTasks as(Table<?> alias) {
        return new InstanceTasks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceTasks rename(String name) {
        return new InstanceTasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceTasks rename(Name name) {
        return new InstanceTasks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InstanceTasks rename(Table<?> name) {
        return new InstanceTasks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceTasks where(Condition condition) {
        return new InstanceTasks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceTasks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceTasks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceTasks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceTasks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceTasks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceTasks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InstanceTasks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceTasks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InstanceTasks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
