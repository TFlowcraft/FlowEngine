/*
 * This file is generated by jOOQ.
 */
package com.database.entity.generated.tables;


import com.database.entity.generated.Indexes;
import com.database.entity.generated.Keys;
import com.database.entity.generated.Public;
import com.database.entity.generated.tables.InstanceHistory.InstanceHistoryPath;
import com.database.entity.generated.tables.InstanceTasks.InstanceTasksPath;
import com.database.entity.generated.tables.records.ProcessInstanceRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProcessInstance extends TableImpl<ProcessInstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.process_instance</code>
     */
    public static final ProcessInstance PROCESS_INSTANCE = new ProcessInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessInstanceRecord> getRecordType() {
        return ProcessInstanceRecord.class;
    }

    /**
     * The column <code>public.process_instance.id</code>.
     */
    public final TableField<ProcessInstanceRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.process_instance.business_data</code>.
     */
    public final TableField<ProcessInstanceRecord, JSONB> BUSINESS_DATA = createField(DSL.name("business_data"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.process_instance.started_at</code>.
     */
    public final TableField<ProcessInstanceRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.process_instance.completed_at</code>.
     */
    public final TableField<ProcessInstanceRecord, OffsetDateTime> COMPLETED_AT = createField(DSL.name("completed_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private ProcessInstance(Name alias, Table<ProcessInstanceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProcessInstance(Name alias, Table<ProcessInstanceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.process_instance</code> table reference
     */
    public ProcessInstance(String alias) {
        this(DSL.name(alias), PROCESS_INSTANCE);
    }

    /**
     * Create an aliased <code>public.process_instance</code> table reference
     */
    public ProcessInstance(Name alias) {
        this(alias, PROCESS_INSTANCE);
    }

    /**
     * Create a <code>public.process_instance</code> table reference
     */
    public ProcessInstance() {
        this(DSL.name("process_instance"), null);
    }

    public <O extends Record> ProcessInstance(Table<O> path, ForeignKey<O, ProcessInstanceRecord> childPath, InverseForeignKey<O, ProcessInstanceRecord> parentPath) {
        super(path, childPath, parentPath, PROCESS_INSTANCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProcessInstancePath extends ProcessInstance implements Path<ProcessInstanceRecord> {
        public <O extends Record> ProcessInstancePath(Table<O> path, ForeignKey<O, ProcessInstanceRecord> childPath, InverseForeignKey<O, ProcessInstanceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProcessInstancePath(Name alias, Table<ProcessInstanceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProcessInstancePath as(String alias) {
            return new ProcessInstancePath(DSL.name(alias), this);
        }

        @Override
        public ProcessInstancePath as(Name alias) {
            return new ProcessInstancePath(alias, this);
        }

        @Override
        public ProcessInstancePath as(Table<?> alias) {
            return new ProcessInstancePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PROCESS_INSTANCE_BUSINESS_DATA);
    }

    @Override
    public UniqueKey<ProcessInstanceRecord> getPrimaryKey() {
        return Keys.PROCESS_INSTANCE_PKEY;
    }

    private transient InstanceHistoryPath _instanceHistory;

    /**
     * Get the implicit to-many join path to the
     * <code>public.instance_history</code> table
     */
    public InstanceHistoryPath instanceHistory() {
        if (_instanceHistory == null)
            _instanceHistory = new InstanceHistoryPath(this, null, Keys.INSTANCE_HISTORY__INSTANCE_HISTORY_INSTANCE_ID_FKEY.getInverseKey());

        return _instanceHistory;
    }

    private transient InstanceTasksPath _instanceTasks;

    /**
     * Get the implicit to-many join path to the
     * <code>public.instance_tasks</code> table
     */
    public InstanceTasksPath instanceTasks() {
        if (_instanceTasks == null)
            _instanceTasks = new InstanceTasksPath(this, null, Keys.INSTANCE_TASKS__INSTANCE_TASKS_INSTANCE_ID_FKEY.getInverseKey());

        return _instanceTasks;
    }

    @Override
    public ProcessInstance as(String alias) {
        return new ProcessInstance(DSL.name(alias), this);
    }

    @Override
    public ProcessInstance as(Name alias) {
        return new ProcessInstance(alias, this);
    }

    @Override
    public ProcessInstance as(Table<?> alias) {
        return new ProcessInstance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessInstance rename(String name) {
        return new ProcessInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessInstance rename(Name name) {
        return new ProcessInstance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessInstance rename(Table<?> name) {
        return new ProcessInstance(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcessInstance where(Condition condition) {
        return new ProcessInstance(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcessInstance where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcessInstance where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcessInstance where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcessInstance where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcessInstance where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcessInstance where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcessInstance where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcessInstance whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcessInstance whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
