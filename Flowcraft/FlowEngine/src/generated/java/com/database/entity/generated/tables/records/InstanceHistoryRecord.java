/*
 * This file is generated by jOOQ.
 */
package com.database.entity.generated.tables.records;


import com.database.entity.generated.tables.InstanceHistory;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InstanceHistoryRecord extends UpdatableRecordImpl<InstanceHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.instance_history.id</code>.
     */
    public InstanceHistoryRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.instance_history.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.instance_history.instance_id</code>.
     */
    public InstanceHistoryRecord setInstanceId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.instance_history.instance_id</code>.
     */
    public UUID getInstanceId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.instance_history.task_id</code>.
     */
    public InstanceHistoryRecord setTaskId(UUID value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.instance_history.task_id</code>.
     */
    public UUID getTaskId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.instance_history.task_status</code>.
     */
    public InstanceHistoryRecord setTaskStatus(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.instance_history.task_status</code>.
     */
    public String getTaskStatus() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.instance_history.error_stacktrace</code>.
     */
    public InstanceHistoryRecord setErrorStacktrace(JSONB value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.instance_history.error_stacktrace</code>.
     */
    public JSONB getErrorStacktrace() {
        return (JSONB) get(4);
    }

    /**
     * Setter for <code>public.instance_history.timestamp</code>.
     */
    public InstanceHistoryRecord setTimestamp(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.instance_history.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InstanceHistoryRecord
     */
    public InstanceHistoryRecord() {
        super(InstanceHistory.INSTANCE_HISTORY);
    }

    /**
     * Create a detached, initialised InstanceHistoryRecord
     */
    public InstanceHistoryRecord(UUID id, UUID instanceId, UUID taskId, String taskStatus, JSONB errorStacktrace, OffsetDateTime timestamp) {
        super(InstanceHistory.INSTANCE_HISTORY);

        setId(id);
        setInstanceId(instanceId);
        setTaskId(taskId);
        setTaskStatus(taskStatus);
        setErrorStacktrace(errorStacktrace);
        setTimestamp(timestamp);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised InstanceHistoryRecord
     */
    public InstanceHistoryRecord(com.database.entity.generated.tables.pojos.InstanceHistory value) {
        super(InstanceHistory.INSTANCE_HISTORY);

        if (value != null) {
            setId(value.getId());
            setInstanceId(value.getInstanceId());
            setTaskId(value.getTaskId());
            setTaskStatus(value.getTaskStatus());
            setErrorStacktrace(value.getErrorStacktrace());
            setTimestamp(value.getTimestamp());
            resetChangedOnNotNull();
        }
    }
}
